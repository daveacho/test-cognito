name: Deploy Lambda Functions

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read


jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lambda: [cognito_backup_restore]  # Add more Lambdas here in the future, e.g., [cognito_backup, new_lambda_function]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GithubActionSessioncognito


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and Tag Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image for ${{ matrix.lambda }}..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.lambda }}-$IMAGE_TAG -f ${{ matrix.lambda }}/Dockerfile .
          
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.lambda }}-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.lambda }}-latest

          docker images | grep $ECR_REPOSITORY | grep ${{ matrix.lambda }} || { 
            echo "Image build failed for ${{ matrix.lambda }}"; 
            exit 1; 
          }
          echo "Image built successfully for ${{ matrix.lambda }}"

      - name: Push Images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Pushing images to ECR for ${{ matrix.lambda }}..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.lambda }}-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.lambda }}-latest
          echo "All images pushed successfully for ${{ matrix.lambda }}"